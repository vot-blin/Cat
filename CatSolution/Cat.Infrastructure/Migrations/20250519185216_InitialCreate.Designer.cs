// <auto-generated />
using System;
using Cat.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cat.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250519185216_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cat.Core.Entities.Breed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("breeds", (string)null);
                });

            modelBuilder.Entity("Cat.Core.Entities.Cat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int>("BreedId")
                        .HasColumnType("integer");

                    b.Property<int>("ClubId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDisqualified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastVaccination")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Medal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("ParentNames")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PedigreeNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("RingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("ClubId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PedigreeNumber")
                        .IsUnique()
                        .HasFilter("\"PedigreeNumber\" IS NOT NULL");

                    b.HasIndex("RingId");

                    b.ToTable("cats", (string)null);
                });

            modelBuilder.Entity("Cat.Core.Entities.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("BronzeMedals")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("GoldMedals")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SilverMedals")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("clubs", (string)null);
                });

            modelBuilder.Entity("Cat.Core.Entities.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClubId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Specializations")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("experts", (string)null);
                });

            modelBuilder.Entity("Cat.Core.Entities.ExpertRing", b =>
                {
                    b.Property<int>("ExpertId")
                        .HasColumnType("integer");

                    b.Property<int>("RingId")
                        .HasColumnType("integer");

                    b.HasKey("ExpertId", "RingId");

                    b.HasIndex("RingId");

                    b.ToTable("expert_rings", (string)null);
                });

            modelBuilder.Entity("Cat.Core.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("PassportIssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PassportIssuedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("PassportNumber")
                        .IsUnique();

                    b.ToTable("owners", (string)null);
                });

            modelBuilder.Entity("Cat.Core.Entities.Ring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Timetable")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("rings", (string)null);
                });

            modelBuilder.Entity("Cat.Core.Entities.RingBreed", b =>
                {
                    b.Property<int>("RingId")
                        .HasColumnType("integer");

                    b.Property<int>("BreedId")
                        .HasColumnType("integer");

                    b.HasKey("RingId", "BreedId");

                    b.HasIndex("BreedId");

                    b.ToTable("ring_breeds", (string)null);
                });

            modelBuilder.Entity("Cat.Core.Entities.Cat", b =>
                {
                    b.HasOne("Cat.Core.Entities.Breed", "Breed")
                        .WithMany("Cats")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cat.Core.Entities.Club", "Club")
                        .WithMany("Cats")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cat.Core.Entities.Owner", "Owner")
                        .WithMany("Cats")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cat.Core.Entities.Ring", "Ring")
                        .WithMany("Cats")
                        .HasForeignKey("RingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Breed");

                    b.Navigation("Club");

                    b.Navigation("Owner");

                    b.Navigation("Ring");
                });

            modelBuilder.Entity("Cat.Core.Entities.Expert", b =>
                {
                    b.HasOne("Cat.Core.Entities.Club", "Club")
                        .WithMany("Experts")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("Cat.Core.Entities.ExpertRing", b =>
                {
                    b.HasOne("Cat.Core.Entities.Expert", "Expert")
                        .WithMany("ExpertRings")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cat.Core.Entities.Ring", "Ring")
                        .WithMany("ExpertRings")
                        .HasForeignKey("RingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Ring");
                });

            modelBuilder.Entity("Cat.Core.Entities.RingBreed", b =>
                {
                    b.HasOne("Cat.Core.Entities.Breed", "Breed")
                        .WithMany("RingBreeds")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cat.Core.Entities.Ring", "Ring")
                        .WithMany("RingBreeds")
                        .HasForeignKey("RingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Ring");
                });

            modelBuilder.Entity("Cat.Core.Entities.Breed", b =>
                {
                    b.Navigation("Cats");

                    b.Navigation("RingBreeds");
                });

            modelBuilder.Entity("Cat.Core.Entities.Club", b =>
                {
                    b.Navigation("Cats");

                    b.Navigation("Experts");
                });

            modelBuilder.Entity("Cat.Core.Entities.Expert", b =>
                {
                    b.Navigation("ExpertRings");
                });

            modelBuilder.Entity("Cat.Core.Entities.Owner", b =>
                {
                    b.Navigation("Cats");
                });

            modelBuilder.Entity("Cat.Core.Entities.Ring", b =>
                {
                    b.Navigation("Cats");

                    b.Navigation("ExpertRings");

                    b.Navigation("RingBreeds");
                });
#pragma warning restore 612, 618
        }
    }
}
